Pass Beg
    VShader Beg
        #version 330 core

        layout(location = 0) in vec2 a_v_;
        layout(location = 1) in vec2 a_uv_;

        uniform mat4 uniform_matrix_mvp;

        out V_OUT_ {
            vec2 mUV;
        } v_out_;

        void main()
        {
            v_out_.mUV   = a_uv_;
            gl_Position  = uniform_matrix_mvp * vec4(a_v_, 0, 1);
        }
    VShader End

    FShader Beg
        #version 330 core

        in V_OUT_ {
            vec2 mUV;
        } v_out_;

        uniform vec2 size_;
        uniform vec2 span_;
        uniform float frequency_;
        uniform float amplitude_;

        out vec4 color_;
        
        vec2 random(vec2 p)
        {
            p = vec2(dot(p, vec2(127.1, 311.7)),
                     dot(p, vec2(269.5, 183.3)));
            return -1.0f + 2.0f * fract(sin(p) * 43758.5453);
        }

        float fade(float t)
        {
            return t * t * t * (t * (t * 6 - 15) + 10);
        }

        float noise_perlin(vec2 p) 
        {
            vec2 i = floor(p);
            vec2 f = fract(p);

            float a = dot(random(i), f);
            float b = dot(random(i + vec2(1, 0)), f - vec2(1, 0));
            float c = dot(random(i + vec2(0, 1)), f - vec2(0, 1));
            float d = dot(random(i + vec2(1, 1)), f - vec2(1, 1));

            f = smoothstep(0, 1, f);
            float v0 = mix(a, b, f.x);
            float v1 = mix(c, d, f.x);
            return mix(v0, v1, f.y);
        }

        void main()
        {
            vec2 p  = vec2(size_.x * v_out_.mUV.x / span_.x,
                           size_.y * v_out_.mUV.y / span_.y);
            // float a = amplitude_;
            // float f = frequency_;
            float v = noise_perlin(p); p *= 2;
            v += 4.0f * noise_perlin(p); p *= 2;
            v += 2.0f * noise_perlin(p); p *= 2;
            v += 1.0f * noise_perlin(p); p *= 2;
            v += 0.5f * noise_perlin(p); p *= 2;
            v += 1.0f * noise_perlin(p); p *= 2;
            // v = abs(v);
            color_ = vec4(v, v, v, 1);
        }
    FShader End
Pass End
