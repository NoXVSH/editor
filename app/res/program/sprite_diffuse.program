Pass Beg
    VShader Beg
        #version 330 core

        layout(location = 0) in vec2 a_v_;
        layout(location = 1) in vec2 a_uv_;

        uniform mat4 uniform_matrix_mvp;

        out V_OUT_ {
            vec2 mUV;
        } v_out_;

        void main()
        {
            v_out_.mUV   = a_uv_;
            gl_Position  = uniform_matrix_mvp * vec4(a_v_, 0, 1);
        }
    VShader End

    FShader Beg
        #version 330 core

        in V_OUT_ {
            vec2 mUV;
        } v_out_;

        uniform vec2      origin_;
        uniform vec4      params_;
        // uniform float     threshold_;
        uniform sampler2D texture0;
        uniform sampler2D texture1;

        out vec4 color_;

        const float PI = 3.1415926f;
        const float PI2 = PI * 2.0f;
        const vec2 center = vec2(0.5f, 0.5f);

        void main()
        {
            float radian = (params_.r * 2 - 1) * PI2;
            vec2 point = v_out_.mUV - origin_;
            float l = length(point);
            float a = acos(point.x / l);
            float u = cos(a + radian) * l + origin_.x;
            float v = sin(a + radian) * l + origin_.y;

            vec4 color0 = texture(texture0, vec2(u, v));
            color_ = color0;

            // vec2 center = vec2(0.5f, 0.5f);
            // vec2 radian = v_out_.mUV - center;
            // vec4 color0 = texture(texture0, v_out_.mUV);
            // vec2 step = 1.0f / textureSize(texture0, 0);

            // float r = dot(radian, radian);
            // float v = 1.0f - smoothstep(0.0f, 0.25f, r);

            // color_.r = max(v, 0.01f);
            // color_.g = max(v, 0.01f);
            // color_.b = max(v, 0.01f);
            // color_.a = 1;



            // vec4 color0 = texture(texture0, v_out_.mUV);
            // vec4 color1 = texture(texture1, v_out_.mUV);
            // float value = step(threshold_, color1.r);
            // color_ = color0 * value;
        }
    FShader End
Pass End
