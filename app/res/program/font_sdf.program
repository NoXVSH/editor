Pass Beg
    VShader Beg
        #version 330 core

        layout(location = 0) in vec2 a_v_;
        layout(location = 1) in vec4 a_c_;
        layout(location = 2) in vec2 a_uv_;

        out V_OUT_ {
            vec4 mColor;
            vec2 mUV;
        } v_out_;

        uniform mat4 uniform_matrix_mvp;

        void main()
        {
            v_out_.mColor   = a_c_;
            v_out_.mUV      = a_uv_;
            gl_Position  = uniform_matrix_mvp * vec4(a_v_, 0, 1);
        }
    VShader End

    FShader Beg
        #version 330 core

        in V_OUT_ {
            vec4 mColor;
            vec2 mUV;
        } v_out_;

        uniform float out_delta_;
        uniform vec4  out_color_;
        uniform sampler2D texture0;

        const float mark = 0.498f;
        out vec4 color_;

        void main()
        {
            float r = texture2D(texture0, v_out_.mUV).r;
            
            //  文字颜色
            vec4 color = vec4(v_out_.mColor.rgb, 0);
            if (r >= mark) { color.a = 1.0f; }

            //  描边
            float r0 = smoothstep(mark - out_delta_ * 2, mark - out_delta_, r);
            vec4 outColor = vec4(out_color_.rgb, r0);

            //  外发光
            // r0 = smoothstep(mark - delta_ - out_delta_, mark - delta_, r);
            // vec4 outColor = vec4(out_color_.rgb, pow(r0, 64));

            //  内发光
            // vec4 outColor = vec4(out_color_.rgb, 0);
            // if (r > mark && (r < mark + out_delta_))
            // {
            //     float s = 1.0f - (r - mark) / out_delta_;
            //     outColor.a = pow(s, 32);
            // }
            // color.rgb   = color.rgb * (1.0f - outColor.a);
            // color_.rgb  = color.rgb + outColor.rgb;
            // color_.a    = color.a;

            //  最终颜色
            color_ = mix(outColor, color, color.a);
        }
    FShader End
Pass End
